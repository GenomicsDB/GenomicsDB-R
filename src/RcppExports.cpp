// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "genomicsdb_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// version
Rcpp::CharacterVector version();
RcppExport SEXP _genomicsdb_version() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(version());
    return rcpp_result_gen;
END_RCPP
}
// connect
Rcpp::XPtr<GenomicsDB> connect(const std::string& workspace, const std::string& vid_mapping_file, const std::string& callset_mapping_file, const std::string& reference_genome, const std::vector<std::string> attributes, const uint64_t segment_size);
RcppExport SEXP _genomicsdb_connect(SEXP workspaceSEXP, SEXP vid_mapping_fileSEXP, SEXP callset_mapping_fileSEXP, SEXP reference_genomeSEXP, SEXP attributesSEXP, SEXP segment_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type workspace(workspaceSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type vid_mapping_file(vid_mapping_fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type callset_mapping_file(callset_mapping_fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type reference_genome(reference_genomeSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type attributes(attributesSEXP);
    Rcpp::traits::input_parameter< const uint64_t >::type segment_size(segment_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(connect(workspace, vid_mapping_file, callset_mapping_file, reference_genome, attributes, segment_size));
    return rcpp_result_gen;
END_RCPP
}
// connect_with_query_json
Rcpp::XPtr<GenomicsDB> connect_with_query_json(const std::string& query_configuration_json_file, const std::string& loader_configuration_json_file, const int concurrency_rank);
RcppExport SEXP _genomicsdb_connect_with_query_json(SEXP query_configuration_json_fileSEXP, SEXP loader_configuration_json_fileSEXP, SEXP concurrency_rankSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type query_configuration_json_file(query_configuration_json_fileSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type loader_configuration_json_file(loader_configuration_json_fileSEXP);
    Rcpp::traits::input_parameter< const int >::type concurrency_rank(concurrency_rankSEXP);
    rcpp_result_gen = Rcpp::wrap(connect_with_query_json(query_configuration_json_file, loader_configuration_json_file, concurrency_rank));
    return rcpp_result_gen;
END_RCPP
}
// disconnect
void disconnect(Rcpp::XPtr<GenomicsDB> genomicsdb);
RcppExport SEXP _genomicsdb_disconnect(SEXP genomicsdbSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GenomicsDB> >::type genomicsdb(genomicsdbSEXP);
    disconnect(genomicsdb);
    return R_NilValue;
END_RCPP
}
// query_variants
Rcpp::List query_variants(Rcpp::XPtr<GenomicsDB> genomicsdb, const std::string& array, Rcpp::List column_ranges, Rcpp::List row_ranges);
RcppExport SEXP _genomicsdb_query_variants(SEXP genomicsdbSEXP, SEXP arraySEXP, SEXP column_rangesSEXP, SEXP row_rangesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GenomicsDB> >::type genomicsdb(genomicsdbSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type array(arraySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type column_ranges(column_rangesSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type row_ranges(row_rangesSEXP);
    rcpp_result_gen = Rcpp::wrap(query_variants(genomicsdb, array, column_ranges, row_ranges));
    return rcpp_result_gen;
END_RCPP
}
// query_variant_calls_json
Rcpp::List query_variant_calls_json(Rcpp::XPtr<GenomicsDB> genomicsdb);
RcppExport SEXP _genomicsdb_query_variant_calls_json(SEXP genomicsdbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GenomicsDB> >::type genomicsdb(genomicsdbSEXP);
    rcpp_result_gen = Rcpp::wrap(query_variant_calls_json(genomicsdb));
    return rcpp_result_gen;
END_RCPP
}
// query_variant_calls
Rcpp::List query_variant_calls(Rcpp::XPtr<GenomicsDB> genomicsdb, const std::string& array, Rcpp::List column_ranges, Rcpp::List row_ranges);
RcppExport SEXP _genomicsdb_query_variant_calls(SEXP genomicsdbSEXP, SEXP arraySEXP, SEXP column_rangesSEXP, SEXP row_rangesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GenomicsDB> >::type genomicsdb(genomicsdbSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type array(arraySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type column_ranges(column_rangesSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type row_ranges(row_rangesSEXP);
    rcpp_result_gen = Rcpp::wrap(query_variant_calls(genomicsdb, array, column_ranges, row_ranges));
    return rcpp_result_gen;
END_RCPP
}
// generate_vcf
void generate_vcf(Rcpp::XPtr<GenomicsDB> genomicsdb, const std::string& output, const std::string& output_format, bool overwrite);
RcppExport SEXP _genomicsdb_generate_vcf(SEXP genomicsdbSEXP, SEXP outputSEXP, SEXP output_formatSEXP, SEXP overwriteSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GenomicsDB> >::type genomicsdb(genomicsdbSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type output(outputSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type output_format(output_formatSEXP);
    Rcpp::traits::input_parameter< bool >::type overwrite(overwriteSEXP);
    generate_vcf(genomicsdb, output, output_format, overwrite);
    return R_NilValue;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _genomicsdb_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpp_vector_access1
void rcpp_vector_access1();
RcppExport SEXP _genomicsdb_rcpp_vector_access1() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_vector_access1();
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_genomicsdb_version", (DL_FUNC) &_genomicsdb_version, 0},
    {"_genomicsdb_connect", (DL_FUNC) &_genomicsdb_connect, 6},
    {"_genomicsdb_connect_with_query_json", (DL_FUNC) &_genomicsdb_connect_with_query_json, 3},
    {"_genomicsdb_disconnect", (DL_FUNC) &_genomicsdb_disconnect, 1},
    {"_genomicsdb_query_variants", (DL_FUNC) &_genomicsdb_query_variants, 4},
    {"_genomicsdb_query_variant_calls_json", (DL_FUNC) &_genomicsdb_query_variant_calls_json, 1},
    {"_genomicsdb_query_variant_calls", (DL_FUNC) &_genomicsdb_query_variant_calls, 4},
    {"_genomicsdb_generate_vcf", (DL_FUNC) &_genomicsdb_generate_vcf, 4},
    {"_genomicsdb_rcpp_hello_world", (DL_FUNC) &_genomicsdb_rcpp_hello_world, 0},
    {"_genomicsdb_rcpp_vector_access1", (DL_FUNC) &_genomicsdb_rcpp_vector_access1, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_genomicsdb(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
